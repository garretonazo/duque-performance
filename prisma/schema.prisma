// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  purchases Purchase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  programs Program[]
}

model Program {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  price       Float
  imageUrl    String?
  pdfUrl      String?
  categoryId  String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  category   Category   @relation(fields: [categoryId], references: [id])
  purchases  Purchase[]
}

model Purchase {
  id        String        @id @default(cuid())
  userId    String
  programId String
  amount    Float
  status    PurchaseStatus @default(PENDING)
  webpayToken String?
  webpayUrl  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  program Program @relation(fields: [programId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
